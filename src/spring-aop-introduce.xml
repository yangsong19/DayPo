<?xml version="1.0" encoding="UTF-8"?>
	
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context = "http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
	    <!-- 扫描指定包    将 @Component 注解的类自动定义为 Spring Bean -->
	    <context:component-scan base-package="spring.aop" />
	 
	    <!-- 配置一个代理 -->
	    <bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
	        <property name="interfaces" value="spring.aop.face.Apology"/> <!-- 需要动态实现的接口 -->
	        <property name="target" ref="greetingImpl" />                 <!-- 目标类	接口实现类 -->
	        <property name="proxyTargetClass" value="true" />	   <!-- 代理目标类（默认为 false，代理接口） -->
	        <property name="interceptorNames">                     <!-- 拦截器名称也就是增强类名称，Spring Bean 的 id-->
	            <list>
	                <value>around</value>
	                <value>throw</value>
	                <value>introduce</value>                       <!-- 引入增强 -->
	            </list>
	        </property>
	        <!-- <property name="interceptorNames" value="advice"/>  只有一个增强类时，注意这行配置 -->
	        <!-- ********* 需要注意 proxyTargetClass 属性，它表明是否代理目标类，默认为 false，也就是代理接口了
	        	  此时 Spring 就用 JDK 动态代理。如果为 true，那么 Spring 就用 CGLib 动态代理。这简直就是太方便了
	        	 Spring 封装了这一切，让程序员不再关心那么多的细节。我们要向老罗同志致敬，您是我们心中永远的 idol -->
	    </bean>
	</beans>