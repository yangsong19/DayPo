package proxy.impl;

import java.lang.reflect.Method;
import java.util.Arrays;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

public class CGLibDynamicProxy implements MethodInterceptor{

	private static CGLibDynamicProxy instance = new CGLibDynamicProxy();

	private CGLibDynamicProxy() {
		super();
	}
	
	public static CGLibDynamicProxy getInstance() {
		return instance;
	}
	
	@SuppressWarnings("unchecked")
	public <T> T getProxy(Class<T> cls) {
		return (T) Enhancer.create(cls, this);
	}
	
	public Object intercept(Object target, Method method, Object[] args,
			MethodProxy proxy) throws Throwable {
		System.out.println("target:"+target.getClass().getName()+";method:"+method.getName()+";args:"+Arrays.toString(args)
				+";proxy:"+proxy.getSuperName()+"|"+proxy.getClass().getName());
		//target->is IntroduceQuestionImpl in JDKDynamicProxy; here is 'proxy.impl.IntroduceQuestionImpl$$EnhancerByCGLIB$$f0a6fe91' created by Enhancer
		//method->question
		//args->[Is this suprised CGLibDynamicProxy?]
		//proxy->'CGLIB$question$0' generated by Enhancer
		before();
		Object object = proxy.invokeSuper(target, args);
		after();
		return object;
	}

	private void after() {
		System.out.println("after333");
	}

	private void before() {
		System.out.println("before333");
	}

}
